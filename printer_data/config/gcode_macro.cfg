[gcode_macro REFRESH_DYNAMIC_MACRO]
gcode:
  DYNAMIC_MACRO
  
[gcode_macro STRUCTURE_PARAM]
variable_bed_length: 220
variable_bed_width: 220
variable_bed_hight: 250
variable_laser_x_offset: -34.5
variable_laser_y_offset: -29.1
variable_laser_z_offset: 3.0
variable_cali_x_offset: 27
variable_cali_y_offset: 45
variable_cali_z_offset: 2
gcode:

[gcode_macro PRINTER_PARAM]
variable_z_safe_pause: 0.0
variable_g28_extruder_temp: 140
variable_fan0_min: 35
variable_z_safe_g28_touch: 10
variable_z_safe_g28_no_touch: 0
variable_fans: 1
gcode:

[gcode_macro BED_LEVELING]
gcode:
  G29  
  
[gcode_macro AXIS_TWIST_COMP_X]
gcode:
  SMART_HOME
  AXIS_TWIST_COMPENSATION_CALIBRATE SAMPLE_COUNT=5

[gcode_macro AXIS_TWIST_COMP_Y]
gcode:
  SMART_HOME
  AXIS_TWIST_COMPENSATION_CALIBRATE AXIS=Y SAMPLE_COUNT=5

[gcode_macro G29]	
gcode:
  G28
  bed_mesh_calibrate
  G1 X0 Y0 Z10 F4200
	
[gcode_macro SMART_HOME]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}  

[gcode_macro INPUTSHAPER]
gcode:
  G90
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  {% if 'X' in params.AXES|upper %}
    SHAPER_CALIBRATE AXIS=X
  {% elif 'Y' in params.AXES|upper %}
    SHAPER_CALIBRATE AXIS=Y
  {% else %}
    SHAPER_CALIBRATE
  {% endif %}
  CXSAVE_CONFIG
  
[gcode_macro NOZZLE_WIPE]
; Macro used to wipe nozzle between filament changes
gcode:
 SMART_HOME 
 G28 X  ;Home X
 G90
; G4 P4000  ;Wait 4 Seconds for Filament to cool - aids clearing nozzle
 G1 X-11.5 F10800  ;1
 G1 X3 F10800
 G1 X-11.5 F10800  ;2
 G1 X3 F10800
 G1 X-11.5 F10800  ;3
 G1 X3 F10800
 G1 X-11.5 F10800  ;4
 G1 X3 F10800
 G1 X-11.5 F10800  ;5
 G1 X3 F10800
 G1 X-11.5 F10800  ;6
 G1 X3 F10800
 G1 X-11.5 F10800  ;7
 G1 X3 F10800
 
[gcode_macro NOZZLE_BRUSH]
gcode:
 G1 X228 F10800  ;1
 G1 X245 F10800
 G1 X228 F10800  ;2
 G1 X245 F10800
 G1 X228 F10800  ;3
 G1 X245 F10800
 G1 X228 F10800  ;4
 G1 X245 F10800
 G1 X228 F10800  ;5
 G1 X245 F10800
 G1 X228 F10800  ;6
 G1 X245 F10800
 G1 X228 F10800  ;7
 G1 X245 F10800
 G1 X228 F10800  ;8
 G1 X245 F10800
 G1 X228 F10800  ;9
 G1 X245 F10800
 G1 X228 F10800  ;10
 G1 X245 F10800
 G1 X112 F10800  ;Middle

[gcode_macro NOZZLE_PURGE_NOTPRINTING]

gcode:
 SAVE_GCODE_STATE NAME=_nozzle_purge_notprinting
 G28 X 
 mmu_servo pos=up
 SET_SERVO SERVO=purge ANGLE=148       ;Move servo to catch filament
 G90
 M83
 G1 E120 F450                          ;Purge 120mm
 G4 P2000                              ;Wait 2 Seconds for Filament to cool on purge plate
 G1 X15 F10800                         ;Move over wiper 
 G4 P500                               ;Wait 0.5 Seconds before retract
 G1 E-2 F450                           ;Retract 2mm
 
 M118 Dump and shake                   ;Dump Start
 SET_SERVO SERVO=purge ANGLE=5
 G4 P500                               ;Wait 0.5 Seconds before shake
 SET_SERVO SERVO=purge ANGLE=100
 SET_SERVO SERVO=purge ANGLE=5
 SET_SERVO SERVO=purge ANGLE=55
 SET_SERVO SERVO=purge ANGLE=5
 SET_SERVO SERVO=purge ANGLE=55
 SET_SERVO SERVO=purge ANGLE=5
 SET_SERVO SERVO=purge ANGLE=55
 SET_SERVO SERVO=purge ANGLE=5
 M118 Wipe                             ;Wipe Start 
 G1 X-11.5 F10800  ;1
 G1 X3 F10800
 G1 X-11.5 F10800  ;2
 G1 X3 F10800
 G1 X-11.5 F10800  ;3
 G1 X3 F10800
 G1 X-11.5 F10800  ;4
 G1 X3 F10800
 G1 X-11.5 F10800  ;5
 SET_SERVO SERVO=purge ANGLE=148       ;Park servo up
 mmu_servo pos=down
 RESTORE_GCODE_STATE NAME=_nozzle_purge_notprinting

[gcode_macro NOZZLE_PURGE]

# The slicer values often are a bit too wasteful. Tune it here to get optimal values. 
variable_purge_length_modifier: 1.0

gcode:
 SAVE_GCODE_STATE NAME=_nozzle_purge
 G28 X 
 mmu_servo pos=up
 SET_SERVO SERVO=purge ANGLE=148            ;Move servo to catch filament
 G90
 M83
  {% set sequence_vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
  {% set park_vars = printer['gcode_macro _MMU_PARK'] %}
  {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
  {% set filament_cross_section = (filament_diameter/2) ** 2 * 3.1415 %}
  {% set from_tool = printer.mmu.last_tool %}
  {% set to_tool = printer.mmu.tool %}
  {% set pv = printer.mmu.slicer_tool_map.purge_volumes %}
  {% set purge_vol = pv[from_tool][to_tool]|float * purge_length_modifier %}
  
  {% if from_tool < 0 and to_tool >= 0%}
      {action_respond_info("PURGE: from tool unknown. Finding largest value for T? > T%d" % to_tool)}
      {% set purge_vol = pv|map(attribute=to_tool)|max %}
  {% elif to_tool < 0 %}
      {action_respond_info("PURGE: tool(s) unknown. Finding largest value")}
      {% set purge_vol = pv|map('max')|max %}
  {% else %}
      {% set purge_vol = pv[from_tool][to_tool]|float * purge_length_modifier %}
      {action_respond_info("PURGE: Swapped T%s > T%s" % (from_tool, to_tool))}
  {% endif %}
  
  {% set purge_len = purge_vol / filament_cross_section %}
  {% set purge_len = purge_len + printer.mmu.extruder_filament_remaining + park_vars.retracted_length %}
  
  
 G1 E{purge_len} F450                  ;Purge using Happy Hare gate map values
 M118 Purge {purge_len}                ;Display Purge length in console
 G1 E5 F450                            ;Purge an additinal fixed lenth 5mm
 
 G4 P2000                              ;Wait 2 Seconds for Filament to cool on purge plate
 G1 X15 F10800                         ;Move over wiper 
 G4 P500                               ;Wait 0.5 Seconds before retract
 
 G1 E-{park_vars.retracted_length} F{sequence_vars.retract_speed * 60}  ;Retract to match what Happy Hare is expecting
 M118 Retracted Length {park_vars.retracted_length}                     ;Display retraction length in console
 G1 E-2 F{sequence_vars.retract_speed * 60}                             ;Retract 2mm
 M118 Retracted additinal fixed 2mm                                     ;Display additinal retraction length in console
 
 M118 Dump and shake                   ;Dump Start
 SET_SERVO SERVO=purge ANGLE=5
 G4 P500                               ;Wait 0.5 Seconds before shake
 SET_SERVO SERVO=purge ANGLE=100
 SET_SERVO SERVO=purge ANGLE=5
 SET_SERVO SERVO=purge ANGLE=55
 SET_SERVO SERVO=purge ANGLE=5
 SET_SERVO SERVO=purge ANGLE=55
 SET_SERVO SERVO=purge ANGLE=5
 SET_SERVO SERVO=purge ANGLE=55
 SET_SERVO SERVO=purge ANGLE=5
 M118 Wipe                             ;Wipe Start 
 G1 X-11.5 F10800  ;1
 G1 X3 F10800
 G1 X-11.5 F10800  ;2
 G1 X3 F10800
 G1 X-11.5 F10800  ;3
 G1 X3 F10800
 G1 X-11.5 F10800  ;4
 G1 X3 F10800
 G1 X-11.5 F10800  ;5
 SET_SERVO SERVO=purge ANGLE=148       ;Park servo up
 mmu_servo pos=down
 RESTORE_GCODE_STATE NAME=_nozzle_purge

[gcode_macro CUSTOM_PARK]
gcode:
; {% set x = params.X|float %}
; {% set y = params.Y|float %}
; {% set park_travel_speed = params.F|float %}
 G1 X-12 F10800

[axis_twist_compensation]
 speed: 100
#   The speed (in mm/s) of non-probing moves during the calibration.
#   The default is 50.
 horizontal_move_z: 3
#   The height (in mm) that the head should be commanded to move to
#   just prior to starting a probe operation. The default is 5.
 calibrate_start_x: 20
#   Defines the minimum X coordinate of the calibration
#   This should be the X coordinate that positions the nozzle at the starting
#   calibration position.
 calibrate_end_x: 200
#   Defines the maximum X coordinate of the calibration
#   This should be the X coordinate that positions the nozzle at the ending
#   calibration position.
 calibrate_y: 112.5
#   Defines the Y coordinate of the calibration
#   This should be the Y coordinate that positions the nozzle during the
#   calibration process. This parameter is recommended to
#   be near the center of the bed
# For Y-axis twist compensation, specify the following parameters:
calibrate_start_y: 20
#   Defines the minimum Y coordinate of the calibration
#   This should be the Y coordinate that positions the nozzle at the starting
#   calibration position for the Y axis. This parameter must be provided if
#   compensating for Y axis twist.
calibrate_end_y: 200
#   Defines the maximum Y coordinate of the calibration
#   This should be the Y coordinate that positions the nozzle at the ending
#   calibration position for the Y axis. This parameter must be provided if
#   compensating for Y axis twist.
calibrate_x: 112.5
#   Defines the X coordinate of the calibration for Y axis twist compensation
#   This should be the X coordinate that positions the nozzle during the
#   calibration process for Y axis twist compensation. This parameter must be
#   provided and is recommended to be near the center of the bed.


[shaketune]
result_folder: /home/pi/printer_data/config/shapers
#    Path where the processed results will be stored. If the folder doesn't exist,
#    it will be automatically created. You can change this if you'd like to store 
#    results in a different location.
number_of_results_to_keep: 10
#    This setting defines how many results you want to keep in the result folder.
#    Once the specified number is exceeded, older results will be automatically deleted
#    to free up space on the SD card and avoid cluttering the results folder.
keep_raw_data: False
#    If set to True, Shake&Tune will store both the processed graphs and the raw accelerometer
#    .stdata files in the results folder. This can be useful for debugging or archiving purposes.
#    Please always attach them when reporting any issues on GitHub or Discord.
show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for system commands (macros that are not part
#    of the printer.cfg file). This option allow Shake&Tune to inject them into the webui at runtime.
#    If set to False, the macros will be hidden but still accessible from the console by typing
#    their names manually, which can be useful if you prefer to encapsulate them into your own macros.
timeout: 600
#    This defines the maximum processing time (in seconds) to allows to Shake&Tune for generating 
#    graphs from a .stdata file. 10 minutes should be more than enough in most cases, but if you have
#    slower hardware (e.g., older SD cards or low-performance devices), increase it to prevent timeouts.
measurements_chunk_size: 2
#    Each Shake&Tune command uses the accelerometer to take multiple measurements. By default,
#    Shake&Tune will write a chunk of data to disk every two measurements, and at the end of the
#    command will merge these chunks into the final .stdata file for processing. "2" is a very
#    conservative setting to avoid Klipper Timer Too Close errors on lower end devices with little
#    RAM, and should work for everyone. However, if you are using a powerful computer, you may
#    wish to increase this value to keep more measurements in memory (e.g., 15-20) before writing
#    the chunk and avoid stressing the filesystem too much.
max_freq: 200
#    This setting defines the maximum frequency at which the calculation of the power spectral density
#    is cutoff. The default value should be fine for most machines and accelerometer combinations and
#    avoid touching it unless you know what you're doing.
dpi: 300
#    Controls the resolution of the generated graphs. The default value of 300 dpi was optimized
#    and strikes a balance between performance and readability, ensuring that graphs are clear
#    without using too much RAM to generate them. Usually, you shouldn't need to change this value.

# printer.cfg

[gcode_macro SET_ACTIVE_SPOOL]
description: Set loaded spool's Spoolman ID in Moonraker
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    MMU_GATE_MAP NEXT_SPOOLID={id}
    FLASH_LEDS
;    {action_call_remote_method(
;       "spoolman_set_active_spool",
;       spool_id=id
;          )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
description: Remove active spool ID in Moonraker
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

[gcode_macro SET_ACTIVE_FILAMENT]
description: Set loaded filament's Spoolman ID
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    SAVE_VARIABLE VARIABLE=active_filament VALUE={id}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro ASSERT_ACTIVE_FILAMENT]
description: PAUSE print if wrong filament's Spoolman ID != ID
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {% set current_id = printer.save_variables.variables["active_filament"]|int %}
    {% if id != current_id %}
      M600
    {% endif %}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro FLASH_LEDS]
gcode:
    SET_LED LED=mmu_leds RED=0 GREEN=1 BLUE=0
    G4 P10
    SET_LED LED=mmu_leds RED=0 GREEN=0 BLUE=0
    G4 P100
    SET_LED LED=mmu_leds RED=0 GREEN=1 BLUE=0
    G4 P10
	SET_LED LED=mmu_leds RED=0 GREEN=0 BLUE=0
    G4 P80
    SET_LED LED=mmu_leds RED=0 GREEN=1 BLUE=0
    G4 P10
    SET_LED LED=mmu_leds RED=0 GREEN=0 BLUE=0
	G4 P60
	SET_LED LED=mmu_leds RED=0 GREEN=1 BLUE=0
    G4 P10
    SET_LED LED=mmu_leds RED=0 GREEN=0 BLUE=0
    G4 P40
    SET_LED LED=mmu_leds RED=0 GREEN=1 BLUE=0
    G4 P10
	SET_LED LED=mmu_leds RED=0 GREEN=0 BLUE=0
    G4 P20
    SET_LED LED=mmu_leds RED=0 GREEN=1 BLUE=0
    G4 P3000
    SET_LED LED=mmu_leds RED=0 GREEN=0 BLUE=0

